#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;
var commander = require('commander');
var util = require('../util');
var package = require('../package.json')

var config = {
    port: 8099,
    root: process.cwd(),
    comboBase: '??',
    comboSep: ','
};

init();

function init() {
    commander
        .version(package.version)
        .command('start')
        .description('start static server')
        .option('-p, --port <n>', 'http server port [default 8099]')
        .option('-r, --root [value]', 'root dir of static files [default process.cwd()]')
        .option('-b, --base [value]', 'comboBase [default ??]')
        .option('-s, --sep [value]', 'comboSep [default ,]')
        .action(function(options){
            options.port && (config.port = options.port);
            options.root && (config.root = options.root);
            options.base && (config.comboBase = options.base);
            options.sep && (config.comboSep = options.sep);

            start(__startCallback);
        });
        
    commander
        .command('stop')
        .description('stop static server')
        .action(function() {
            stop(function(err, success) {
                if(err) {
                    console.log(err);
                } else if (!success) {
                    console.log('no stserver started.');
                }
                process.exit();
            });
        });
        
    commander
        .command('restart')
        .description('restart static server')
        .action(function() {
            stop(function() {
                start(__startCallback);
            });
        });
        
    commander
        .command('open')
        .description('open static server tmp directory')
        .action(function() {
            util.open(util.getTmpPath(), function() {
                //
            });
        });

    commander.parse(process.argv);

    if(!commander.args.length) commander.help();
    
    function __startCallback(err) {
        if(err) {
            console.log(err);
        }
        process.exit();
    }
}

function start(callback) {
    var script =  path.join(__dirname, '../index.js');
    var args = [ script ];

    for(var key in config) {
        if(config.hasOwnProperty(key)) {
            args.push('--' + key, String(config[key]));
        }
    }
    
    process.stdout.write('\nStarting server .');
    
    var logFile = util.getLogFile();
    var server = spawn(process.execPath, args, {
        cwd: path.dirname(config.root),
        detached: true,
        stdio: [0, fs.openSync(logFile, 'w'), fs.openSync(logFile, 'w+')]
    });
    
    var log = '';
    var started = false;
    var error = false;
    var stoper;
    var onData = function(chunk) {
        if (started) {
            return;
        }

        chunk = chunk.toString('utf8');
        log += chunk;
        process.stdout.write('.');

        if (~chunk.indexOf('Error')) {
            if (error) {
                return;
            }

            error = true;
            process.stdout.write(' fail.\n');

            var match = chunk.match(/Error:?\s+([^\r\n]+)/i);
            var errMsg = 'unknown';

            if (~chunk.indexOf('EADDRINUSE')) {
                log = '';
                errMsg = 'Address already in use:' + config.port;
            } else if (match) {
                errMsg = match[1];
            }

            log && console.log(log);
            stoper && stoper();

            try {
                callback(errMsg);
            } catch (e) {
                console.log(e);
            }
        } else if (~chunk.indexOf('Listening on')) {
            started = true;
            stoper && stoper();

            process.stdout.write(' at port [' + config.port + ']\n');
            callback(null);
        }
    }

    stoper = watchOnFile(logFile, onData);
    util.pid(server.pid); // save pid to file.
    server.unref();
}

function stop(callback) {
    var pid = util.pid();
    
    pid ? checkPid(pid, function(exists) {
        if (exists) {
            if (util.isWin()) {
                // windows 貌似没有 gracefully 关闭。
                // 用 process.kill 会遇到进程关不了的情况，没有 exit 事件响应，原因不明！
                require('child_process').exec('taskkill /PID ' + pid + ' /T /F');
            } else {
                // try to gracefully kill it.
                process.kill(pid, 'SIGTERM');
            }

            // checkout it every half second.
            (function(done) {
                var start = Date.now();
                var timer = setTimeout(function() {
                    var fn = arguments.callee;

                    checkPid(pid, function(exists) {
                        if (exists) {
                            // 实在关不了，那就野蛮的关了它。
                            if (Date.now() - start > 5000) {
                                try {
                                    isWin ?
                                        require('child_process').exec('taskkill /PID ' + pid + ' /T /F') :
                                        process.kill(pid, 'SIGKILL');
                                } catch (e) {
                                    // I dont care the error.
                                }

                                clearTimeout(timer);
                                done();
                                return;
                            }
                            timer = setTimeout(fn, 500);
                        } else {
                            done();
                        }
                    });
                }, 20);
            })(function() {
                console.log('Shutdown with pid [%s]', pid);
                util.pid(0);
                callback && callback(null, true);
            });
        } else {
            callback && callback(null, false);
        }
    }) :
    // pid 文件不存在，说明没有开启服务。
    callback && callback(null, false);
}

function checkPid(pid, callback) {
    var list, msg = '';
    var isWin = util.isWin();
    if (isWin) {
        list = spawn('tasklist');
    } else {
        list = spawn('ps', ['-A']);
    }
    list.stdout.on('data', function(chunk) {
        msg += chunk.toString('utf-8').toLowerCase();
    });
    list.on('exit', function() {
        var found = false;
        msg.split(/[\r\n]+/).forEach(function(item) {
            var m = item.match(/\d+/);
            if (m && m[0] == pid) {
                found = true;
            }
        });
        callback(found);
    });
    list.on('error', function(e) {
        if (isWin) {
            console.log('fail to execute `tasklist` command, please add your system path (eg: C:\\Windows\\system32, you should replace `C` with your system disk) in %PATH%');
        } else {
            console.log('fail to execute `ps` command.');
        }
    });
};

// 每 0.2 秒读取子进程的输出文件。
//
// 为什么不直接通过 child.stdout 读取？
// 因为如果使用 stdio pipe 的方式去开启子进程，当 master 进程退出后，子进程再有输出就会导致程序莫名的崩溃。
// 解决办法是，让子进程的输出直接指向文件指针。
// master 每隔一段时间去读文件，获取子进程输出。
function watchOnFile(filepath, callback) {
    var lastIndex = 0;
    var timer;

    function read() {
        var stat = fs.statSync(filepath);

        if (stat.size != lastIndex) {
            var fd = fs.openSync(filepath, 'r');
            var buffer = new Buffer(stat.size - lastIndex);

            try {
                fs.readSync(fd, buffer, lastIndex, stat.size - lastIndex);
                var content = buffer.toString('utf8');
                lastIndex = stat.size;

                callback(content);
            } catch (e) {
                // 从头读起
                lastIndex = 0;
            }
        }

        timer = setTimeout(read, 200);
    }

    read();
    return function() {
        clearTimeout(timer);
    };
}